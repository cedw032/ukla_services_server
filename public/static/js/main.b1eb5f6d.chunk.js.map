{"version":3,"sources":["logo.svg","views/CreateUserView.js","post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CreateUserView","_this","this","_ref","state","_ref$username","username","_ref$password","password","react_default","a","createElement","className","type","value","onChange","_ref2","target","setState","_ref3","children","onClick","route","payload","Promise","resolve","reject","base","url","console","log","axios","post","then","result","data","catch","e","error","Component","App","CreateUserView_CreateUserView","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iNCGnBC,mLAEX,IAAAC,EAAAC,KAAAC,EAIJD,KAAKE,OAAS,GAJVC,EAAAF,EAEPG,gBAFO,IAAAD,EAEI,GAFJA,EAAAE,EAAAJ,EAGPK,gBAHO,IAAAD,EAGI,GAHJA,EAMR,OACCE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACdH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OACXC,MAAOR,EACPS,SAAU,SAAAC,GAAuB,IAAZF,EAAYE,EAArBC,OAASH,MACpBb,EAAKiB,SAAS,CAACZ,SAAUQ,OAE3BL,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OACXC,MAAON,EACPO,SAAU,SAAAI,GAAuB,IAAZL,EAAYK,EAArBF,OAASH,MACpBb,EAAKiB,SAAS,CAACV,SAAUM,OAE3BL,EAAAC,EAAAC,cAAA,UAAQS,SAAS,cAChBC,QAAU,WCvBA,IAAcC,EAAOC,GAAPD,EDwBlB,OCxByBC,EDwBjBtB,EAAKG,MCtBhB,IAAIoB,QAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAmD,6CACnDC,EAAKD,EAAOL,EAClBO,QAAQC,IAAI,SAAUH,EAAML,EAAOC,GACnCQ,IAAMC,KAAKJ,EAAKL,GAASU,KAAK,SAACC,GAAD,OAAYT,EAAQS,EAAOC,QAAOC,MAAM,SAACC,GACtER,QAAQS,MAAMD,GACdX,EAAOW,QDgBqBJ,KAAK,SAACC,GAC9BL,QAAQC,IAAI,SAAUI,GACtBjC,EAAKiB,SAAS,CACbZ,SAAU,GACVE,SAAU,kBA5B0B+B,aEW7BC,mLAPb,OACC/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAC8B,EAAD,cAJcF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.b1eb5f6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport post from '../post'\n\nexport default class CreateUserView extends Component {\n\n\trender() {\n\t\tconst {\n\t\t\tusername = '', \n\t\t\tpassword = '',\n\t\t} = this.state || {};\n\n\t\treturn (\n\t\t\t<div className=\"create-user-view\">\n\t\t\t\t<span>username</span>\n\t\t\t\t<input type='text' \n\t\t\t\t\tvalue={username}\n\t\t\t\t\tonChange={({target: {value}}) => {\n\t\t\t\t\t\tthis.setState({username: value});\n\t\t\t\t\t}} />\n\t\t\t\t<span>password</span>\n\t\t\t\t<input type='text' \n\t\t\t\t\tvalue={password}\n\t\t\t\t\tonChange={({target: {value}}) => {\n\t\t\t\t\t\tthis.setState({password: value});\n\t\t\t\t\t}} />\n\t\t\t\t<button children='Create User' \n\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\tpost('user', this.state).then((result) => {\n\t\t\t\t\t\t\tconsole.log('RESULT', result);\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tusername: '',\n\t\t\t\t\t\t\t\tpassword: '',\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t}} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import axios from 'axios'\nimport config from './config'\n\nexport default function post(route, payload) {\n\n\treturn new Promise((resolve, reject) => {\n\t\tconst base = config().isDev ? 'http://localhost:5000/' : 'https://still-hollows-65231.herokuapp.com/';\n\t\tconst url= base + route; \n\t\tconsole.log('post: ', base, route, payload);\n\t\taxios.post(url, payload).then((result) => resolve(result.data)).catch((e) => {\n\t\t\tconsole.error(e);\n\t\t\treject(e);\n\t\t});\n\t});\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CreateUserView from './views/CreateUserView';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<CreateUserView />\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}